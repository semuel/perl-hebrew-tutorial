<?xml version="1.0" encoding="UTF-8"?>
<html>
<body>
    <title>מודולים</title>
    <section>כללי</section>
    <text>
עד עכשיו השתמשנו ביכולות הבנויות של פרל. אחלה יכולות, אבל מה הלאה?<br/>
כדי להרחיב את היכולות של פרל, משתמשים במודולים. מודולים הם קבצי פרל, שאתה מוסיף לתוכנית שלך. זה כמו ה-include של C. מישהו כבר ישב וכתב קוד המטפל בפעולות מסובכות. לא צריך להמציא את הגלגל מחדש בכל פעם. (למרות שזה כיף)<br/>
קיימים אלפי מודולים עבור פרל. מודולים עבור תקשורת מול מסדי נתונים, מודולים עבור תקשורת מול האינטרנט, מודולים לניתוח קבצים, מודולים עבור מבני נתונים מסובכים. תבחר נושא, ובטח יש בשבילו מודול. כל המודולים נכתבו ע"י אנשים פרטיים, ולכן קיימים מודולים עם באגים, קיימים מודולים בהם המחבר נעלם, אבל רובם תקינים, והמחברים בד"כ מתקנים את הבאגים, אם וכאשר נמצאים כאלה. אז כנס לאתר <a href="http://search.cpan.org/">search.CPAN.org</a>, ותרגיש חופשי למצוא מודול שעושה בדיוק את מה שאתה צריך.
    </text>
    <section>שימוש במודולים</section>
    <text>
כדי להשתמש במודול, תשתמש בפקודה use. ככה:
    </text>
    <code>
use LWP::Simple;
    </code>
    <text>
כאן אני מבקש מהקומפילר שיחבר לתוכנית מודול. המודול הספציפי הזה הוא לגישה לדפים באינטרנט. בתוך המודול כתוב איזה פונקציות ואילו משתנים הוא ייתן לי. למשל, המודול הזה נותן פונקציה הנקראת בפשטות get, שמקבל URL, ומחזירה את הדף שבאותו מיקום.
    </text>
    <code>
$content = get("http://www.google.com/"); 
    </code>
    <text>
אחרי הפקודה הזאת, בתוך <code>$content</code> יהיה כל הדף הראשי של גוגל.<br/><br/>
כאשר עושים use כמו למעלה, אזי המודול נותן לך איזה פונקציות שהוא רוצה. אבל יש פונקציות שהוא ייתן לך רק אם תבקש במיוחד:
    </text>
    <code>
use LWP::Simple qw{$ui}; 
    </code>
    <text>
כאן אתה אומר לו, אני יודע שיש לך בפנים את <code>$ui</code>, תן לי אותו!
    </text>
    <section>מודולים כאובייקטים</section>
    <text>
אין בפרל אובייקטים אמיתיים. במקום זה, משתמשים במודולים בתור אובייקטים. לדוגמא:
    </text>
    <code>
use FileHandle; 
    </code>
    <text>
זהו מודול שנותן גישה נוחה יותר לקבצים מאשר האופציות הפנימיות של פרל. (במיוחד אם אתה משתמש בכמה קבצים בו זמנית) כדי להגדיר באמצעותו מחזיק-קובץ, עושים:
    </text>
    <code>
$fh=new FileHandle; 
    </code>
    <text>
ואז, כדי לפתוח את הקובץ:
    </text>
    <code>
$fh->open("> tmp.txt"); 
    </code>
    <text>
או פשוט:
    </text>
    <code>
$fh=new FileHandle("> tmp.txt"); 
    </code>
    <text>
שים לב רגע להבדל בין מודולים רגילים למודולים אובייקטים. מודולים רגילים מוסיפים לך עוד פונקציות לסביבת ההרצה, כמו בדוגמא שבסעיף הקודם. לפני שקראנו למודול לא היתה פקודת get, ואילו עכשיו יש. לעומת זאת, מודולים שהם אובייקטים לא מוסיפים לך פונקציות, אלא מחכים שתעשה להם new ודרך האובייקט תעבוד. כמובן, יש מודולים שעובדים בשני הדרכים, גם מוסיפים פונקציות וגם עובדים כמו אובייקט, אבל זו זכותם...
    </text>
    <section>מודולים פופולריים</section>
    <text>
יש בעיות נפוצות יותר, ויש בעיות נפוצות פחות. בהתאם, יש מודולים שכולם משתמשים, ויש מודולים שבאים לתת מענה לבעיה ספציפית נידחת. הבאתי פה רשימה של המודולים היותר פופולריים, בהנחה שתזדקק להם בשלב זה או אחר.
<table border="1" dir="ltr" id="AutoNumber1" cellspacing="1" cellpadding="3" col="2" row="8">
  <tr>
    <th dir="rtl">תיאור</th>
    <th dir="rtl">שם מודול</th>
  </tr>
  <tr>
    <td dir="rtl">גישה לאינטרנט (בפרוטוקול http)</td>
    <td>LWP::Simple</td>
  </tr>
  <tr>
    <td dir="rtl">גישה למסדי נתונים</td>
    <td>Dbi</td>
  </tr>
  <tr>
    <td dir="rtl">גישה לתיבת הדואר (על יוניקס)</td>
    <td>Mail::Box</td>
  </tr>
  <tr>
    <td dir="rtl">כתיבת תוכניות CGI</td>
    <td>CGI</td>
  </tr>
  <tr>
    <td dir="rtl">גישה נוחה לקבצים</td>
    <td>FileHandle</td>
  </tr>
  <tr>
    <td dir="rtl">גישה למשתני הסביבה</td>
    <td>Env</td>
  </tr>

  <tr>
    <td dir="rtl">מידע על איך פרל קומפלה</td>
    <td>Config</td>
  </tr>
</table>
    </text>
    <section>תוכניות דוגמא</section>
    <code>
#!/usr/bin/perl -w 
use strict; 
use FileHandle; 
my $handle = new FileHandle; 
$handle->open("+> output") or die "File won't open!\n"; 
$handle->print("A line in the river\n"); 
print $handle "And a line under the river\n"; 
seek($handle, 0, 0); 
print "I printed: ", &lt;$handle&gt;; 
$handle->close(); 
    </code>
    <text>
זוהי תוכנית המשתמש במודול FileHandle. אפשר לראות שמשתמשים במשתנה <code>$handle</code> גם בתור מחזיק קובץ רגיל, וגם כמו אובייקט. (כמו שאפשר לראות בשתי ההדפסות)<br/>
עוד הערה, זה אנחנו פותחים את הקובץ באמצעות סימון מיוחד, '&lt;+'. זה פתיחה עבור כתיבה וקריאה גם יחד. זה מאפשר לנו לעשות את פקודת ה-seek בתוכנית. התוכנית תפתח קובץ חדש (או תדרוס קובץ קיים) בשם output, תדפיס לתוכו שתי שורות, תקפוץ חזרה לתחילת הקובץ, ותדפיס את מה שהודפס לתוכו.
    </text>
    <code>
#!/usr/bin/perl -w
use strict;
use LWP::Simple;
my $url="http://www.altavista.com/web/results?".
        "q=perl&amp;kgs=0&amp;kls=0&amp;avkw=aapt";
my $i=1;
my ($content, $next_url);
while ($url) {
    $content=get($url);
    $i++;
    print $url . "\n";
    open(my $fh, ">", "altavista$i.html");
    print $fh $url, "\n";
    print $fh $content;
    close($fh);
    if ($content=~m|&lt;a href="([^&lt;&gt;"]+)"[^&lt;&gt;]*&gt;\[Next &amp;gt;&amp;gt;\]&lt;/a&gt;|) {
        $next_url=$1;
        $url="http://www.altavista.com".$next_url;
        sleep(10);
    } else {
         $url=undef;
    }
}
    </code>
    <text>
תוכנית המוציאה את כל הדפים שאלטא-ויסטא מוצאת על פרל. (היא שומרת את דפי אתר האלטא-ויסטא עצמם) אפשר לקחת את זה עוד צעד, ולהדפיס את ה-URL שנמצאו, (ע"י עוד פקודת while בסקריפט שמחפשת לינקים בתוך הדף) אבל זה תעשה בעצמך. התוכנית עובדת בעזרת LWP::Simple, המספקת לנו פקודת get, שמביאה דף מהאינטרנט. יש גם פקודת getstore, שמביאה דף מהאינטרנט ושומרת אותו לדיסק. יש עוד הרבה, אבל נסתפק בזה.
    </text>
</body>
</html>