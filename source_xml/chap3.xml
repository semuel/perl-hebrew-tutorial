<?xml version="1.0" encoding="UTF-8"?>
<html>
<body>
    <title>מבני בקרה</title>
    <section>ביטויים בוליאניים</section>
    <text>
כמו שכבר הסברנו בפרק סוגי משתנים, סעיף משתנים סקלרים, בפרל 0, המחרוזת הריקה ("") ו-undef הם שקר, כל דבר אחר זה אמת.<br/>
פרל תומכת בכל האופרטורים הבוליאניים המוכרים, אם בסגנון C, (&amp;&amp;, ||, !) או בסגנון פסקל. (And, Or, Not)<br/>
אופרטורים לוגיים:
<table border="1" cellpadding="3" dir="ltr" id="AutoNumber1" cellspacing="1" col="3" row="4">
  <tr>
    <th dir="rtl">פעולה</th>
    <th dir="rtl">אופרטור פסקל </th>
    <th dir="rtl">אופרטור C </th>
  </tr>
  <tr>
    <td>And</td>
    <td>$a and $b</td>
    <td>$a &amp;&amp; $b</td>
  </tr>
  <tr>
    <td>Or</td>
    <td>$a or $b</td>
    <td>$a || $b</td>
  </tr>
  <tr>
    <td>Not</td>
    <td>not $a</td>
    <td>! $a</td>
  </tr>
</table>
אופרטורי השוואה: בפרל יש אופרטורים שונים להשוואה בין מספרים ולהשוואה בין מחרוזות. (טוב, בשפות אחרות כדי להשוות בין מחרוזות יש פונקציות מיוחדות)
<table border="1" dir="ltr" id="AutoNumber2" cellspacing="1" cellpadding="3" col="3" row="8">
  <tr>
    <th dir="rtl">פעולה</th>
    <th dir="rtl">אופרטור מחרוזת</th>
    <th dir="rtl">אופרטור מספר</th>
  </tr>
  <tr>
    <td dir="rtl">האם שווה</td>
    <td>$a eq $b</td>
    <td>$a == $b</td>
  </tr>
  <tr>
    <td dir="rtl">האם לא שווה</td>
    <td>$a ne $b</td>
    <td>$a != $b</td>
  </tr>
  <tr>
    <td dir="rtl">האם גדול </td>
    <td>$a gt $b</td>
    <td>$a &gt; $b</td>
  </tr>
  <tr>
    <td dir="rtl">האם גדול-שווה</td>
    <td>$a ge $b</td>
    <td>$a &gt;= $b</td>
  </tr>
  <tr>
    <td dir="rtl">האם קטן </td>
    <td>$a lt $b</td>
    <td>$a &lt; $b</td>
  </tr>
  <tr>
    <td dir="rtl">האם קטן-שווה</td>
    <td>$a le $b</td>
    <td>$a &lt;= $b</td>
  </tr>
  <tr>
    <td dir="rtl">השוואה</td>
    <td>$a cmp $b</td>
    <td>$a &lt;=&gt; $b</td>
  </tr>
</table>
אופרטור ההשוואה מחזיר: 1 אם <code>$a&gt;$b</code>, מחזיר 0 אם <code>$a==$b</code>, ומחזיר <code>-1</code> אם <code>$a&lt;$b</code>.
    </text>
    <section>פקודת if וניגזרותיה</section>
    <text>
כן, ניגזרותיה. כלל גדול בפרל אומר, "יש יותר מדרך אחת לעשות את זה". ובפרט, יש יותר מדרך אחת לעשות if. אבל נתחיל ברגילה, בסדר? הנה: 
    </text>
    <code>
if (condition1) { 
    Set of commands...
} elsif (condition2) { 
    Set of commands...
} else { 
    Set of commands...
} 
    </code>
    <text>
אלה שני משפטי תנאי רגילים, משורשרים.<br/>
יש גם וורסיות אחרות של משפט ה-if. הפקודות הבאות זהות:
    </text>
    <code>
if ($m==3) { 
    print "Avukado"; 
} 
print "Avukado" if ($m==3); 
print "Avukado" unless ($m != 3); 
    </code>
    <section>פקודת while</section>
    <text>
טוב, פה פרל זהה לשפת C. כמעט. הנה דוגמא: 
    </text>
    <code>
while ($line=&lt;&gt;) { 
    $count_lines++;
    if (substr($line,1) eq '#') { 
        next; 
    } 
    if ($line eq "End\n") { 
        last; 
    } 
    print $line;
} 
    </code>
    <text>
אז מה יש לנו כאן? בשורה הראשונה יש את אופרטור ה-&lt;&gt;. זה אופרטור שקורא שורה מה-stdin, ומציב אותה לתוך <code>$line</code>. אם לא נשארו שורות - הוא יחזיר undef, מה שיתן שקר, והלולאה תסתיים. נסביר בפרק מאוחר יותר על האופרטור הזה. <br/>
מיד אחרי שקראתי את השורה, אני סופר אותה. שיהיה. אח"כ אני בודק האם התו הראשון של השורה הוא "#". אם כן, אזי אני מדלג ועובר לשורה הבאה. אם השורה היא “End”, הסתיים הקובץ, ואני שובר החוצה מהלולאה. ובסוף, אם לא קרה שום דבר דרסטי, אני מדפיס את השורה לפלט הסטנדרטי (STDOUT). 
    </text>
    <section>לולאת for</section>
    <text>
לולאת for היא בהחלט כמו המקבילה של ב-C. כמעט. 
    </text>
    <code>
my ($m, $i); 
$m=1; 
for ($i=1; $i&lt;5; $i++) { 
    $m = $m*$i; 
} 
    </code>
    <text>
יש ללולאות גם פקודות בקרה: 
    </text>
    <code>
my ($m, $i, $j) = (0,0,0); 
for ($i=1, $m=1; $i&lt;5; $i++) { 
    $j++; 
    redo unless ($j>=$i); 
    if ($i+$m>30) { 
        last; 
    } 
    next if ($i==1); 
    $m=$m*$i/$j; 
} 
    </code>
    <text>
פקודת next מקפיצה את ההרצה לסוף הלולאה, ומתחילה סיבוב חדש של הלולאה. כלומר, <code>$i</code> מתקדם באחד, והלולאה שוב מתחילה לרוץ. פקודת last שוברת את הלולאה, והתוכנית ממשיכה לרוץ. פקודת redo היא פקודה מיוחדת. היא מקפיצה את ההרצה לתחילת הלולאה. זה אומר ש-<code>$i</code> לא מתקדם, אבל <code>$j</code> שממוקם שורה מתחתיו, כן יתקדם. לא ראיתי את זה בשום שפה אחרת, אבל דוגמא מעניינת להוראה תמצאו בפרק על טיפול בקבצים. <br/>
מקרה אחר של for היא ה-foreach. הנה דוגמא: 
    </text>
    <code>
foreach $count (10,9,8,7,6,5,4,3,2,1,"BOOM!") { 
    print "$count\n"; 
} 
    </code>
    <text>
בכל סיבוב של הלולאה, <code>$count</code> מקבל אחד מהערכים של הרשימה שאחריו, שמודפס בפקודה. אם הרשימה היא בעצם מערך, אזי <code>$count</code> בעצם נהפך לערך. לא נתמקד במוזרות הזאת, רק נראה דוגמא: 
    </text>
    <code>
my @arr=(1,2,3,4,5); 
foreach $val (@arr) { 
    $val=$val*2+1; 
} 
    </code>
    <text>
כאן הערכים בתוך המערך <code>@arr</code> ישתנו. מוזר, אך אמיתי ויעיל. 
    </text>
    <section>פעולות על תנאי</section>
    <text>
כשפרל בודק משפטים לוגיים, הוא עושה זאת בחלקים. לדוגמא, אם יש את הביטוי הבא: 
    </text>
    <code>
$x or $m++ 
    </code>
    <text>
אם <code>$x</code> הוא אמת, אזי <code>$m</code> לא יקודם. זה בגלל שפרל כבר יודע שהערך של הביטוי הוא אמת, ואין לו צורך לבדוק את חלקו השני. <br/>
משתמשים בזה בפרל המון, פשוט במקום לעשות if. הנה פתיחת קובץ טיפוסית: 
    </text>
    <code>
open(my $fh, ">", "zorba.txt") or die "Cann’t open that file!\n"; 
    </code>
    <text>
הפקודה open פותחת קובץ, בשם zorba.txt, תחת המשתנה <code>$fh</code>. אם היא מצליחה, היא מחזירה אמת, ואז פרל לא ממשיכה לבדוק את התנאי. אם open מחזירה שקר, אז פרל ממשיך לבדוק את התנאי, ומגיע לפקודה <code>die "string"</code>, שמוציאה את הודעת השגיאה ועוצרת את ההרצה. <br/>
נכון, זה יכול להיות מכוער, ואפשר לכתוב בעזרת זה דברים לחלוטין בלתי קריאים. אבל זה פרל, ואפשר להשתמש בזה במקום המון פקודות if. תגיד בעצמך מה יותר קריא, הפקודה שלמעלה או פקודה מקבילה בסגנון C? 
    </text>
    <code>
if (open(FH, ">", "zorba.txt")==0) { 
    die "Cann't open that file!\n"; 
} 
    </code>
    <text>
בקיצור, אחרי שמתרגלים לזה, זה נחמד. 
    </text>
    <section>תוכנית דוגמא</section>
    <text>
כרגע יש לנו, כאבני בנין את המשתנים, ואת מבני הבקרה. התוכנית עכשיו יכולה להיות קצת יותר אינטילגנטית. (אבל לא בהרבה) 
    </text>
    <code>
#!/usr/bin/perl -w 
use strict; 
my ($key, $val); 
my %h; 
while ($key=&lt;&gt;) { 
    defined($val=&lt;&gt;) or die "Odd number of line?!\n"; 
    chomp($key); 
    chomp($val); 
    $h{$key}=$val; 
} 
foreach $key (keys(%h)) { 
    print $key, "->", $h{$key}, ", "; 
} 
print "\n"; 
print $h{"message"}, "\n"; 
my $i ; 
for ($i=1; $i&lt;$h{"loop count"}; $i++) { 
    last if ($h{"loop count"}*2-$i&lt;5); 
    print $h{"loop msg"}, "\n"; 
} 
    </code>
    <text>
התוכנית משתמשת בפקודה שעדיין לא הזכרנו - chomp. זוהי פקודה שמורידה מהקלט את סימני סוף השורה. אם לא נשים אותה, התוכנית גם תעבוד, אבל נקבל כל מיני אזהרות. (בגלל שאנחנו משתמשים ב-"<code>-w</code>" בשורה הראשונה של התוכנית, שאומרת לו להזהיר אותנו) זה יקרה בכל פעם שננסה להשתמש בקלט כמספר, ואז הוא צריך לתרגם אותו למספר, ישמיט את סימני סוף השורה, יזהיר אותנו שהוא עשה את זה, אבל ימשיך לרוץ. <br/>
מה שהתוכנית עושה זה לקרוא קובץ, וכל זוג שורות להכניס בתור מפתח וערך לתוך טבלת האש. אח"כ היא מדפיסה את טבלת ההאש שהתקבלה, מדפיסה את הערך שתחת המפתח "message", ואז רצה בלולאה לפי "loop count" ומדפיסה את "loop msg". קובץ קלט לדוגמא: 
    </text>
    <code>
&lt;Start input file&gt; 
5
Oops.
loop count
17
And the winner is
me.
loop msg
AhAhAhAh!
message
Resistance is futile
&lt;End input file&gt; 
    </code>
    <text>
שים לב שאין חשיבות לסדר הזוגות. ממילא הכל נשפך אח"כ לתוך האש ומתערבל שם. שים גם לב לכך שמספר השורות צריך להיות זוגי. אם הוא לא זוגי, (יכול להיות שהעורך שלך אוהב להוסיף שורה ריקה בסוף הקובץ) אז פשוט תוסיף בעצמך שורה ריקה, וכך יהיו לך שתי שורות ריקות בסוף הקובץ. <br/>
הרצת התוכנית: אם נקרא לקובץ הקלט פשוט "in3", לקובץ של הסקריפט "chap3.pl", אזי ביוניקס השורה הבאה תפעיל את הקובץ: 
    </text>
    <code>
./chap3.pl &lt;in3 
    </code>
    <text>
בחלונות, בהנחה שפרל היא בנתיב החיפוש: 
    </text>
    <code>
perl chap3.pl &lt;in3 
    </code>
    <text>
בהצלחה. 
    </text>
</body>
</html>